{"version":3,"file":"static/webpack/static/development/pages/index.js.3ca69652ff3b89da0941.hot-update.js","sources":["webpack:///./pages/index.tsx"],"sourcesContent":["import Link from \"next/link\";\nimport Header from \"../components/header\";\nimport Layout from \"../components/layout\";\nimport React, { useContext, useEffect, useState} from \"react\";\nimport PodcastContext from '../components/context/podcastContext';\nimport {UPDATE_CURRENT_PODCAST} from '..//components/context/reducers'\n// import apollo, { withApollo } from '../lib/apollo'\n// import PodcastsList from '../components/apolloLayout';\nimport { useQuery } from '@apollo/react-hooks';\nimport PodcastCard from '../components/podcastCard'\nimport {PodcastsQuery, LatestPodcastQuery} from '../services/query';\nimport _ from 'lodash'\n\n// interface Podcasts {\n//   title: String,\n//   id: String,\n//   description: String,\n//   // image: ImageObject\n// }\n\nconst Index = () => {\n    const podcastContext = useContext(PodcastContext)\n    const { data, loading, error } = useQuery(PodcastsQuery);\n    const [loadingStatus, setLoadingStatus] = useState(loading);\n    const [podcastData, setPodcastData] = useState(null);\n\n    console.log(\"data\", data);\n\n\n    // useEffect(()=> {\n    //     if(podcastContext.podcastState.currentPodcast == \"\") {\n    //         podcastContext.updateCurrentPodcast('test')\n    //         // podcastContext.dispatch({type: UPDATE_CURRENT_PODCAST, value: 'test'})\n    //     }\n    // }, [])\n\n    useEffect(()=> {\n        if(data && !_.isEqual(data.podcasts, podcastData)) {\n            setPodcastData(data)\n        }\n    }, [data]);\n\n    useEffect(()=> {\n        setLoadingStatus(loading);\n    }, [loading])\n    \n\n    const handleCardsMapping = () => {\n      podcastData && podcastData.podcasts\n      return (\n        <PodcastCard/>\n      )\n    }\n\n  return (\n    <Layout>\n    {/* <PodcastsList /> */}\n      <p>Hello Next.js</p>\n    </Layout>\n  );\n};\n\n//reason get initial props is not used in this situation, is due to the fact that it would not work with hooks. When react suspense is out, this might be updated. \n\n\nexport default Index;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAKA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAGA;;;;A","sourceRoot":""}