{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var UPDATE_PODCASTS_LIST = 'UPDATE_PODCASTS_LIST';\nexport var UPDATE_CURRENT_PODCAST = 'UPDATE_CURRENT_PODCAST';\n// const updatePodcastsList = (podcasts) => {\n//     return podcasts;\n// }\n// const updateCurrentPodcast = (podcast) => {\n//     return podcast;\n// }\nexport var podcastReducer = function podcastReducer(state, action) {\n  switch (action.type) {\n    case UPDATE_PODCASTS_LIST:\n      {\n        // let podcasts = updatePodcastsList(state.podcasts);\n        return _objectSpread({}, state, {\n          podcasts: action.value\n        });\n      }\n\n    case UPDATE_CURRENT_PODCAST:\n      {\n        // let currentPodcast = updateCurrentPodcast(state.currentPodcast);\n        return _objectSpread({}, state, {\n          currentPodcast: action.value\n        });\n      }\n\n    default:\n      return state;\n  }\n};","map":null,"metadata":{},"sourceType":"module"}