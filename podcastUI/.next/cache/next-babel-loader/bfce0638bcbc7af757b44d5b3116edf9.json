{"ast":null,"code":"import { useState, useEffect } from 'react';\n\nfunction useAudioPlayer() {\n  var _useState = useState(),\n      duration = _useState[0],\n      setDuration = _useState[1];\n\n  var _useState2 = useState(),\n      currentTime = _useState2[0],\n      setCurrentTime = _useState2[1];\n\n  var _useState3 = useState(false),\n      playing = _useState3[0],\n      setPlaying = _useState3[1];\n\n  var _useState4 = useState(),\n      clickedTime = _useState4[0],\n      setClickedTime = _useState4[1];\n\n  useEffect(function () {\n    var audio = document.getElementById(\"audio\");\n\n    var setAudioMeta = function setAudioMeta() {\n      debugger;\n      setDuration(audio.duration);\n      setCurrentTime(audio.currentTime);\n    };\n\n    var setAudioTime = function setAudioTime() {\n      return setCurrentTime(audio.currentTime);\n    };\n\n    audio.addEventListener(\"loadeddata\", setAudioMeta);\n    audio.addEventListener(\"timeupdate\", setAudioTime);\n    playing ? audio.play() : audio.pause();\n\n    if (clickedTime && clickedTime !== currentTime) {\n      audio.currentTime = clickedTime;\n      setClickedTime(null);\n    }\n\n    return function () {\n      audio.removeEventListener(\"loadeddata\", setAudioMeta);\n      audio.removeEventListener(\"timeupdate\", setAudioTime);\n    };\n  });\n  return {\n    currentTime: currentTime,\n    duration: duration,\n    playing: playing,\n    setPlaying: setPlaying,\n    setClickedTime: setClickedTime\n  };\n}\n\nexport default useAudioPlayer;","map":{"version":3,"sources":["/Users/kod/Desktop/podcastframework/podcastUI/components/audio/useAudioPlayer.ts"],"names":["useState","useEffect","useAudioPlayer","duration","setDuration","currentTime","setCurrentTime","playing","setPlaying","clickedTime","setClickedTime","audio","document","getElementById","setAudioMeta","setAudioTime","addEventListener","play","pause","removeEventListener"],"mappings":"AAAA,SAAQA,QAAR,EAAkBC,SAAlB,QAAkC,OAAlC;;AAGA,SAASC,cAAT,GAA0B;AAAA,kBACUF,QAAQ,EADlB;AAAA,MACfG,QADe;AAAA,MACLC,WADK;;AAAA,mBAEgBJ,QAAQ,EAFxB;AAAA,MAEfK,WAFe;AAAA,MAEFC,cAFE;;AAAA,mBAGQN,QAAQ,CAAC,KAAD,CAHhB;AAAA,MAGfO,OAHe;AAAA,MAGNC,UAHM;;AAAA,mBAIgBR,QAAQ,EAJxB;AAAA,MAIfS,WAJe;AAAA,MAIFC,cAJE;;AAQtBT,EAAAA,SAAS,CAAC,YAAK;AAEX,QAAMU,KAAK,GAAqBC,QAAQ,CAACC,cAAT,CAAwB,OAAxB,CAAhC;;AAEA,QAAMC,YAAY,GAAG,SAAfA,YAAe,GAAM;AACvB;AACAV,MAAAA,WAAW,CAACO,KAAK,CAACR,QAAP,CAAX;AACAG,MAAAA,cAAc,CAACK,KAAK,CAACN,WAAP,CAAd;AACH,KAJD;;AAKA,QAAMU,YAAY,GAAG,SAAfA,YAAe;AAAA,aAAMT,cAAc,CAACK,KAAK,CAACN,WAAP,CAApB;AAAA,KAArB;;AAGAM,IAAAA,KAAK,CAACK,gBAAN,CAAuB,YAAvB,EAAqCF,YAArC;AACAH,IAAAA,KAAK,CAACK,gBAAN,CAAuB,YAAvB,EAAqCD,YAArC;AAGAR,IAAAA,OAAO,GAAGI,KAAK,CAACM,IAAN,EAAH,GAAkBN,KAAK,CAACO,KAAN,EAAzB;;AAEA,QAAGT,WAAW,IAAIA,WAAW,KAAKJ,WAAlC,EAA+C;AAC3CM,MAAAA,KAAK,CAACN,WAAN,GAAoBI,WAApB;AACAC,MAAAA,cAAc,CAAC,IAAD,CAAd;AAEH;;AAED,WAAO,YAAM;AACTC,MAAAA,KAAK,CAACQ,mBAAN,CAA0B,YAA1B,EAAwCL,YAAxC;AACAH,MAAAA,KAAK,CAACQ,mBAAN,CAA0B,YAA1B,EAAwCJ,YAAxC;AAEH,KAJD;AAKH,GA7BQ,CAAT;AA+BA,SAAO;AACHV,IAAAA,WAAW,EAAXA,WADG;AAEHF,IAAAA,QAAQ,EAARA,QAFG;AAGHI,IAAAA,OAAO,EAAPA,OAHG;AAIHC,IAAAA,UAAU,EAAVA,UAJG;AAKHE,IAAAA,cAAc,EAAdA;AALG,GAAP;AAQH;;AAED,eAAeR,cAAf","sourcesContent":["import {useState, useEffect} from 'react';\n\n\nfunction useAudioPlayer() {\n    const [duration, setDuration] = useState();\n    const [currentTime, setCurrentTime] = useState();\n    const [playing, setPlaying] = useState(false);\n    const [clickedTime, setClickedTime] = useState();\n\n\n\n    useEffect(()=> {\n\n        const audio = <HTMLAudioElement>document.getElementById(\"audio\");\n\n        const setAudioMeta = () => {\n            debugger;\n            setDuration(audio.duration);\n            setCurrentTime(audio.currentTime)\n        }\n        const setAudioTime = () => setCurrentTime(audio.currentTime);\n\n\n        audio.addEventListener(\"loadeddata\", setAudioMeta);\n        audio.addEventListener(\"timeupdate\", setAudioTime);\n\n\n        playing ? audio.play() : audio.pause();\n\n        if(clickedTime && clickedTime !== currentTime) {\n            audio.currentTime = clickedTime;\n            setClickedTime(null);\n\n        }\n\n        return () => {\n            audio.removeEventListener(\"loadeddata\", setAudioMeta);\n            audio.removeEventListener(\"timeupdate\", setAudioTime);\n\n        }\n    })\n\n    return {\n        currentTime, \n        duration,\n        playing, \n        setPlaying, \n        setClickedTime\n    }\n\n}\n\nexport default useAudioPlayer;\n"]},"metadata":{},"sourceType":"module"}