{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/kod/Desktop/podcastframework/podcastUI/pages/_app.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport App from \"next/app\";\nimport GlobalState from \"../components/context/globalState\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport withData from '../lib/apollo';\nimport { config } from '@fortawesome/fontawesome-svg-core';\nimport '@fortawesome/fontawesome-svg-core/styles.css';\nconfig.autoAddCss = false;\n\nfunction MyApp({\n  Component,\n  pageProps,\n  apollo\n}) {\n  return __jsx(ApolloProvider, {\n    client: apollo,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, __jsx(GlobalState, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, __jsx(Component, _extends({}, pageProps, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }))));\n} // Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\n\nexport default withData(MyApp);","map":{"version":3,"sources":["/Users/kod/Desktop/podcastframework/podcastUI/pages/_app.js"],"names":["App","GlobalState","ApolloProvider","withData","config","autoAddCss","MyApp","Component","pageProps","apollo"],"mappings":";;;;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,WAAP,MAAwB,mCAAxB;AACA,SAASC,cAAT,QAA+B,qBAA/B;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA,SAASC,MAAT,QAAuB,mCAAvB;AACA,OAAO,8CAAP;AAIAA,MAAM,CAACC,UAAP,GAAoB,KAApB;;AAEA,SAASC,KAAT,CAAe;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,CAAf,EAAiD;AAC/C,SACE,MAAC,cAAD;AAAgB,IAAA,MAAM,EAAEA,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,MAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,SAAD,eAAeD,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADA,CADF;AAOD,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeL,QAAQ,CAACG,KAAD,CAAvB","sourcesContent":["import App from \"next/app\";\nimport GlobalState from \"../components/context/globalState\";\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport withData from '../lib/apollo';\n\nimport { config } from '@fortawesome/fontawesome-svg-core'\nimport '@fortawesome/fontawesome-svg-core/styles.css'\n\n\n\nconfig.autoAddCss = false\n\nfunction MyApp({ Component, pageProps, apollo }) {\n  return (\n    <ApolloProvider client={apollo}>\n    <GlobalState>\n      <Component {...pageProps} />\n    </GlobalState>\n    </ApolloProvider>\n  );\n}\n\n// Only uncomment this method if you have blocking data requirements for\n// every single page in your application. This disables the ability to\n// perform automatic static optimization, causing every page in your app to\n// be server-side rendered.\n//\n// MyApp.getInitialProps = async (appContext) => {\n//   // calls page's `getInitialProps` and fills `appProps.pageProps`\n//   const appProps = await App.getInitialProps(appContext);\n//\n//   return { ...appProps }\n// }\n\nexport default withData(MyApp);\n"]},"metadata":{},"sourceType":"module"}