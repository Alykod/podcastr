{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport const UPDATE_PODCASTS_LIST = 'UPDATE_PODCASTS_LIST';\nexport const UPDATE_CURRENT_PODCAST = 'UPDATE_CURRENT_PODCAST';\n\nconst updatePodcastsList = podcasts => {\n  return podcasts;\n};\n\nconst updateCurrentPodcast = podcast => {\n  return podcast;\n};\n\nexport const podcastReducer = (state, action) => {\n  debugger;\n\n  switch (action.type) {\n    case UPDATE_PODCASTS_LIST:\n      {\n        let podcasts = updatePodcastsList(state.podcasts);\n        return _objectSpread({}, state, {\n          podcasts: action.value\n        });\n      }\n\n    case UPDATE_CURRENT_PODCAST:\n      {\n        debugger;\n        let currentPodcast = updateCurrentPodcast(state.currentPodcast);\n        return _objectSpread({}, state, {\n          currentPodcast: action.value\n        });\n      }\n\n    default:\n      return state;\n  }\n};","map":{"version":3,"sources":["/Users/kod/Desktop/podcastframework/podcastUI/components/context/reducers.tsx"],"names":["UPDATE_PODCASTS_LIST","UPDATE_CURRENT_PODCAST","updatePodcastsList","podcasts","updateCurrentPodcast","podcast","podcastReducer","state","action","type","value","currentPodcast"],"mappings":";;;;;;;;;;;;AAAA,OAAO,MAAMA,oBAA4B,GAAG,sBAArC;AACP,OAAO,MAAMC,sBAA8B,GAAG,wBAAvC;;AAaP,MAAMC,kBAAkB,GAAIC,QAAD,IAAc;AACrC,SAAOA,QAAP;AACH,CAFD;;AAIA,MAAMC,oBAAoB,GAAIC,OAAD,IAAa;AACtC,SAAOA,OAAP;AACH,CAFD;;AAKA,OAAO,MAAMC,cAAc,GAAG,CAACC,KAAD,EAAeC,MAAf,KAAkC;AAC5D;;AACA,UAAOA,MAAM,CAACC,IAAd;AACI,SAAKT,oBAAL;AAA2B;AACvB,YAAIG,QAAQ,GAAGD,kBAAkB,CAACK,KAAK,CAACJ,QAAP,CAAjC;AACA,iCAAWI,KAAX;AAAkBJ,UAAAA,QAAQ,EAAEK,MAAM,CAACE;AAAnC;AACH;;AACD,SAAKT,sBAAL;AAA6B;AACzB;AACA,YAAIU,cAAc,GAAGP,oBAAoB,CAACG,KAAK,CAACI,cAAP,CAAzC;AACA,iCAAWJ,KAAX;AAAkBI,UAAAA,cAAc,EAAEH,MAAM,CAACE;AAAzC;AACH;;AACD;AAAS,aAAOH,KAAP;AAVb;AAYH,CAdM","sourcesContent":["export const UPDATE_PODCASTS_LIST: string = 'UPDATE_PODCASTS_LIST';\nexport const UPDATE_CURRENT_PODCAST: string = 'UPDATE_CURRENT_PODCAST';\n\ninterface State {\n    podcasts: Array<Object>,\n    currentPodcast: Object,\n    theme: string\n}\n\ninterface Action {\n    type: string\n    value: any\n}\n\nconst updatePodcastsList = (podcasts) => {\n    return podcasts;\n}\n\nconst updateCurrentPodcast = (podcast) => {\n    return podcast;\n}\n\n\nexport const podcastReducer = (state: State, action: Action) => {\n    debugger;\n    switch(action.type) {\n        case UPDATE_PODCASTS_LIST: {\n            let podcasts = updatePodcastsList(state.podcasts);\n            return {...state, podcasts: action.value};\n        }\n        case UPDATE_CURRENT_PODCAST: {\n            debugger;\n            let currentPodcast = updateCurrentPodcast(state.currentPodcast);\n            return {...state, currentPodcast: action.value}\n        }\n        default: return state;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}