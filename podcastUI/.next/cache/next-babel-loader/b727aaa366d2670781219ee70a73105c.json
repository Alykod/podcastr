{"ast":null,"code":"var _jsxFileName = \"/Users/kod/Desktop/podcastframework/podcastUI/pages/podcasts.tsx\";\nvar __jsx = React.createElement;\nimport { useRouter } from 'next/router';\nimport Layout from '../components/layout';\nimport React, { useEffect, useState } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { SinglePodcast } from '../services/query';\nimport _ from 'lodash';\nimport PodcastTemplate from '../components/podcastTemplate';\n\nvar PodcastPage = function PodcastPage() {\n  var router = useRouter();\n\n  var _useQuery = useQuery(SinglePodcast, {\n    variables: {\n      filter: router.query.title\n    }\n  }),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  var _useState = useState(null),\n      podcast = _useState[0],\n      setPodcast = _useState[1];\n\n  useEffect(function () {\n    if (data && !_.isEqual(data.podcast, podcast)) {\n      setPodcast(data.podcasts[0]);\n    }\n  }, [data]);\n  useEffect(function () {\n    if (error) {\n      window.location.href = window.location.origin;\n    }\n  }, [error]); // const handleLayout = (podcast) => {\n  //     return (\n  //         <section className=\"section\">\n  //         <div className=\"container\">\n  //             <Tile isAncestor>\n  //                 <Tile isParent isVertical className=\"is-4\">\n  //                     <img style={{height: '100%', objectFit: \"cover\", width: '100%'}} src={cardUrlHandler(podcast.image.url)} alt={podcast.title}/>\n  //                 </Tile>\n  //                 <Tile isParent>\n  //                     <Box>\n  //                         <Title>{podcast.title}</Title>\n  //                         {/* <audio controls>\n  //                             <source src={cardUrlHandler(podcast.audioFile.url)} type={podcast.audioFile.mime} id={podcast.audioFile.id}/>\n  //                         </audio> */}\n  //                         <AudioPlayer {...podcast.audioFile} />\n  //                         <Content>{podcast.description}</Content>\n  //                     </Box>\n  //                 </Tile>\n  //             </Tile>\n  //         </div>\n  //     </section>\n  //     )\n  // }\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, !loading ? __jsx(PodcastTemplate, {\n    podcast: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }) : null);\n};\n\nexport default PodcastPage;","map":{"version":3,"sources":["/Users/kod/Desktop/podcastframework/podcastUI/pages/podcasts.tsx"],"names":["useRouter","Layout","React","useEffect","useState","useQuery","SinglePodcast","_","PodcastTemplate","PodcastPage","router","variables","filter","query","title","data","loading","error","podcast","setPodcast","isEqual","podcasts","window","location","href","origin"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,aAA1B;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAAuD,OAAvD;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAA8BC,aAA9B,QAAmD,mBAAnD;AACA,OAAOC,CAAP,MAAc,QAAd;AAKA,OAAOC,eAAP,MAA4B,+BAA5B;;AAIA,IAAMC,WAAW,GAAG,SAAdA,WAAc,GAAM;AACtB,MAAMC,MAAM,GAAGV,SAAS,EAAxB;;AADsB,kBAEWK,QAAQ,CAACC,aAAD,EAAgB;AAAEK,IAAAA,SAAS,EAAE;AAAEC,MAAAA,MAAM,EAAEF,MAAM,CAACG,KAAP,CAAaC;AAAvB;AAAb,GAAhB,CAFnB;AAAA,MAEdC,IAFc,aAEdA,IAFc;AAAA,MAERC,OAFQ,aAERA,OAFQ;AAAA,MAECC,KAFD,aAECA,KAFD;;AAAA,kBAIQb,QAAQ,CAAiB,IAAjB,CAJhB;AAAA,MAIfc,OAJe;AAAA,MAINC,UAJM;;AAOtBhB,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAIY,IAAI,IAAI,CAACR,CAAC,CAACa,OAAF,CAAUL,IAAI,CAACG,OAAf,EAAwBA,OAAxB,CAAb,EAA+C;AAC3CC,MAAAA,UAAU,CAACJ,IAAI,CAACM,QAAL,CAAc,CAAd,CAAD,CAAV;AACH;AACJ,GAJQ,EAIN,CAACN,IAAD,CAJM,CAAT;AAOAZ,EAAAA,SAAS,CAAC,YAAK;AACX,QAAGc,KAAH,EAAU;AACNK,MAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAwBF,MAAM,CAACC,QAAP,CAAgBE,MAAxC;AACH;AACJ,GAJQ,EAIN,CAACR,KAAD,CAJM,CAAT,CAdsB,CAqBtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SACI,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,CAACD,OAAD,GAAW,MAAC,eAAD;AAAiB,IAAA,OAAO,MAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAX,GAAyC,IAD7C,CADJ;AAKH,CAlDD;;AAqDA,eAAeP,WAAf","sourcesContent":["import { useRouter } from 'next/router';\nimport Layout from '../components/layout';\nimport React, { useEffect, useState, useContext } from 'react';\nimport { useQuery } from '@apollo/react-hooks';\nimport { SelectedPodcastQuery,SinglePodcast } from '../services/query';\nimport _ from 'lodash'\nimport { Box, Tile, Title , Content} from 'bloomer';\nimport {Podcast} from '../services/interface'\nimport PodcastContext from '../components/context/podcastContext';\nimport AudioPlayer from '../components/audioPlayer';\nimport PodcastTemplate from '../components/podcastTemplate';\n\n\n\nconst PodcastPage = () => {\n    const router = useRouter();\n    const { data, loading, error } = useQuery(SinglePodcast, { variables: { filter: router.query.title } })\n\n    const [podcast, setPodcast] = useState<Podcast | null>(null);\n\n\n    useEffect(() => {\n        if (data && !_.isEqual(data.podcast, podcast)) {\n            setPodcast(data.podcasts[0])\n        }\n    }, [data]);\n\n\n    useEffect(()=> {\n        if(error) {\n            window.location.href =  window.location.origin;\n        }\n    }, [error]);\n\n\n    // const handleLayout = (podcast) => {\n    //     return (\n    //         <section className=\"section\">\n    //         <div className=\"container\">\n    //             <Tile isAncestor>\n    //                 <Tile isParent isVertical className=\"is-4\">\n    //                     <img style={{height: '100%', objectFit: \"cover\", width: '100%'}} src={cardUrlHandler(podcast.image.url)} alt={podcast.title}/>\n    //                 </Tile>\n    //                 <Tile isParent>\n    //                     <Box>\n    //                         <Title>{podcast.title}</Title>\n    //                         {/* <audio controls>\n    //                             <source src={cardUrlHandler(podcast.audioFile.url)} type={podcast.audioFile.mime} id={podcast.audioFile.id}/>\n    //                         </audio> */}\n    //                         <AudioPlayer {...podcast.audioFile} />\n    //                         <Content>{podcast.description}</Content>\n    //                     </Box>\n    //                 </Tile>\n    //             </Tile>\n    //         </div>\n    //     </section>\n    //     )\n    // }\n\n    return (\n        <Layout>\n           {!loading ? <PodcastTemplate podcast /> : null}\n        </Layout>\n    )\n}\n\n\nexport default PodcastPage\n\n\n\n"]},"metadata":{},"sourceType":"module"}