{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nvar _jsxFileName = \"/Users/kod/Desktop/podcastframework/podcastUI/pages/index.js\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport Header from \"../components/header\";\nimport Layout from \"../components/layout\";\nimport React, { useContext, useEffect } from \"react\";\nimport PodcastContext from '../components/context/podcastContext';\nimport { UPDATE_CURRENT_PODCAST } from '..//components/context/reducers';\nimport { withApollo } from '../lib/apollo'; // import PodcastsList from '../components/apolloLayout';\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { PodcastsQuery, LatestPodcastQuery } from '../services/query';\n\nvar Index = function Index() {\n  var podcastContext = useContext(PodcastContext);\n\n  var _useQuery = useQuery(PodcastsQuery),\n      data = _useQuery.data,\n      loading = _useQuery.loading,\n      error = _useQuery.error;\n\n  console.log(data);\n\n  var _useQuery2 = useQuery(LatestPodcastQuery, {\n    variables: {\n      someId: \"1\"\n    }\n  }),\n      newDAta = _useQuery2.newDAta;\n\n  console.log(newDAta);\n  useEffect(function () {\n    debugger;\n\n    if (podcastContext.podcastState.currentPodcast == \"\") {\n      podcastContext.updateCurrentPodcast('test'); // podcastContext.dispatch({type: UPDATE_CURRENT_PODCAST, value: 'test'})\n    }\n  }, []); // console.log(useContext(PodcastContext));\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"Hello Next.js\"));\n};\n\nIndex.getInitialProps = function _callee() {\n  var _useQuery3, data, loading, error;\n\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _useQuery3 = useQuery(PodcastsQuery), data = _useQuery3.data, loading = _useQuery3.loading, error = _useQuery3.error;\n          console.log(loading, error);\n\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  });\n};\n\nexport default Index;","map":{"version":3,"sources":["/Users/kod/Desktop/podcastframework/podcastUI/pages/index.js"],"names":["Link","Header","Layout","React","useContext","useEffect","PodcastContext","UPDATE_CURRENT_PODCAST","withApollo","useQuery","PodcastsQuery","LatestPodcastQuery","Index","podcastContext","data","loading","error","console","log","variables","someId","newDAta","podcastState","currentPodcast","updateCurrentPodcast","getInitialProps"],"mappings":";;;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,QAA6C,OAA7C;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,SAAQC,sBAAR,QAAqC,iCAArC;AACA,SAASC,UAAT,QAA2B,eAA3B,C,CACA;;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAAQC,aAAR,EAAuBC,kBAAvB,QAAgD,mBAAhD;;AAGA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAChB,MAAMC,cAAc,GAAGT,UAAU,CAACE,cAAD,CAAjC;;AADgB,kBAEiBG,QAAQ,CAACC,aAAD,CAFzB;AAAA,MAERI,IAFQ,aAERA,IAFQ;AAAA,MAEFC,OAFE,aAEFA,OAFE;AAAA,MAEOC,KAFP,aAEOA,KAFP;;AAGhBC,EAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;;AAHgB,mBAKIL,QAAQ,CAACE,kBAAD,EAAqB;AAAEQ,IAAAA,SAAS,EAAE;AAACC,MAAAA,MAAM,EAAE;AAAT;AAAb,GAArB,CALZ;AAAA,MAKRC,OALQ,cAKRA,OALQ;;AAMhBJ,EAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;AACAhB,EAAAA,SAAS,CAAC,YAAK;AACX;;AACA,QAAGQ,cAAc,CAACS,YAAf,CAA4BC,cAA5B,IAA8C,EAAjD,EAAqD;AACjDV,MAAAA,cAAc,CAACW,oBAAf,CAAoC,MAApC,EADiD,CAEjD;AACH;AACJ,GANQ,EAMN,EANM,CAAT,CAPgB,CAchB;;AACF,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,CADF;AAMD,CArBD;;AAwBAZ,KAAK,CAACa,eAAN,GAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,uBACWhB,QAAQ,CAACC,aAAD,CADnB,EACbI,IADa,cACbA,IADa,EACPC,OADO,cACPA,OADO,EACEC,KADF,cACEA,KADF;AAEpBC,UAAAA,OAAO,CAACC,GAAR,CAAYH,OAAZ,EAAqBC,KAArB;;AAFoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAxB;;AAMA,eAAeJ,KAAf","sourcesContent":["import Link from \"next/link\";\nimport Header from \"../components/header\";\nimport Layout from \"../components/layout\";\nimport React, { useContext, useEffect } from \"react\";\nimport PodcastContext from '../components/context/podcastContext';\nimport {UPDATE_CURRENT_PODCAST} from '..//components/context/reducers'\nimport { withApollo } from '../lib/apollo'\n// import PodcastsList from '../components/apolloLayout';\nimport { useQuery } from '@apollo/react-hooks';\nimport {PodcastsQuery, LatestPodcastQuery} from '../services/query';\n\n\nconst Index = () => {\n    const podcastContext = useContext(PodcastContext)\n    const { data, loading, error } = useQuery(PodcastsQuery);\n    console.log(data);\n\n    const { newDAta } = useQuery(LatestPodcastQuery, { variables: {someId: \"1\"}})\n    console.log(newDAta)\n    useEffect(()=> {\n        debugger;\n        if(podcastContext.podcastState.currentPodcast == \"\") {\n            podcastContext.updateCurrentPodcast('test')\n            // podcastContext.dispatch({type: UPDATE_CURRENT_PODCAST, value: 'test'})\n        }\n    }, [])\n    // console.log(useContext(PodcastContext));\n  return (\n    <Layout>\n    {/* <PodcastsList /> */}\n      <p>Hello Next.js</p>\n    </Layout>\n  );\n};\n\n\nIndex.getInitialProps = async function(){\n    const {data, loading, error} = useQuery(PodcastsQuery);\n    console.log(loading, error)\n}\n\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}