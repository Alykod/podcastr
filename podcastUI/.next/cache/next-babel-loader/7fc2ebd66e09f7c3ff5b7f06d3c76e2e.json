{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/kod/Desktop/podcastframework/podcastUI/components/apolloLayout.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\nquery  ALL_POSTS_QUERY{\\n      description\\n    }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { NetworkStatus } from 'apollo-client';\nimport gql from 'graphql-tag';\nexport var ALL_POSTS_QUERY = gql(_templateObject());\nexport var allPostsQueryVars = {\n  skip: 0,\n  first: 10\n};\nexport default function PodcastsList() {\n  var _useQuery = useQuery(ALL_POSTS_QUERY, {\n    variables: allPostsQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus;\n\n  debugger;\n  var loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  var loadMorePosts = function loadMorePosts() {\n    debugger;\n    fetchMore({\n      variables: {\n        skip: allPosts.length\n      },\n      updateQuery: function updateQuery(previousResult, _ref) {\n        var fetchMoreResult = _ref.fetchMoreResult;\n\n        if (!fetchMoreResult) {\n          return previousResult;\n        }\n\n        return _Object$assign({}, previousResult, {\n          // Append the new posts results to the old one\n          allPosts: [].concat(_toConsumableArray(previousResult.allPosts), _toConsumableArray(fetchMoreResult.allPosts))\n        });\n      }\n    });\n  };\n\n  if (error) return console.log(error);\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Loading\");\n  var allPosts = data.allPosts,\n      _allPostsMeta = data._allPostsMeta;\n  var areMorePosts = allPosts.length < _allPostsMeta.count;\n  return __jsx(\"section\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, allPosts.map(function (post, index) {\n    return __jsx(\"li\", {\n      key: post.id,\n      className: \"jsx-1458778202\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    }, __jsx(\"div\", {\n      className: \"jsx-1458778202\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, __jsx(\"span\", {\n      className: \"jsx-1458778202\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, index + 1, \". \"), __jsx(\"a\", {\n      href: post.url,\n      className: \"jsx-1458778202\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, post.title)));\n  })), areMorePosts && __jsx(\"button\", {\n    onClick: function onClick() {\n      return loadMorePosts();\n    },\n    disabled: loadingMorePosts,\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, loadingMorePosts ? 'Loading...' : 'Show More'), __jsx(_JSXStyle, {\n    id: \"1458778202\",\n    __self: this\n  }, \"section.jsx-1458778202{padding-bottom:20px;}li.jsx-1458778202{display:block;margin-bottom:10px;}div.jsx-1458778202{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}a.jsx-1458778202{font-size:14px;margin-right:10px;-webkit-text-decoration:none;text-decoration:none;padding-bottom:0;border:0;}span.jsx-1458778202{font-size:14px;margin-right:5px;}ul.jsx-1458778202{margin:0;padding:0;}button.jsx-1458778202:before{-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;border-style:solid;border-width:6px 4px 0 4px;border-color:#ffffff transparent transparent transparent;content:'';height:0;margin-right:5px;width:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9rb2QvRGVza3RvcC9wb2RjYXN0ZnJhbWV3b3JrL3BvZGNhc3RVSS9jb21wb25lbnRzL2Fwb2xsb0xheW91dC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF1RWtCLEFBRytCLEFBR04sQUFJSyxBQUlKLEFBT0EsQUFJTixBQUlTLFNBSFIsS0FuQlMsQ0FRRCxBQU9ELElBS25CLENBdkJBLFlBbUJBLENBZkEsQUFRdUIsc0NBY0YsWUFiRixPQWNVLEdBcEJkLE9BT0osU0FDWCxRQWEyRCxrREFwQjNELE9BcUJhLFdBQ0YsU0FDUSxpQkFDVCxRQUNWIiwiZmlsZSI6Ii9Vc2Vycy9rb2QvRGVza3RvcC9wb2RjYXN0ZnJhbWV3b3JrL3BvZGNhc3RVSS9jb21wb25lbnRzL2Fwb2xsb0xheW91dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSAnQGFwb2xsby9yZWFjdC1ob29rcydcbmltcG9ydCB7IE5ldHdvcmtTdGF0dXMgfSBmcm9tICdhcG9sbG8tY2xpZW50J1xuaW1wb3J0IGdxbCBmcm9tICdncmFwaHFsLXRhZydcblxuXG5leHBvcnQgY29uc3QgQUxMX1BPU1RTX1FVRVJZID0gZ3FsYFxucXVlcnkgIEFMTF9QT1NUU19RVUVSWXtcbiAgICAgIGRlc2NyaXB0aW9uXG4gICAgfVxuYFxuZXhwb3J0IGNvbnN0IGFsbFBvc3RzUXVlcnlWYXJzID0ge1xuICBza2lwOiAwLFxuICBmaXJzdDogMTAsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBvZGNhc3RzTGlzdCgpIHtcbiAgY29uc3QgeyBsb2FkaW5nLCBlcnJvciwgZGF0YSwgZmV0Y2hNb3JlLCBuZXR3b3JrU3RhdHVzIH0gPSB1c2VRdWVyeShcbiAgICBBTExfUE9TVFNfUVVFUlksXG4gICAge1xuICAgICAgdmFyaWFibGVzOiBhbGxQb3N0c1F1ZXJ5VmFycyxcbiAgICAgIC8vIFNldHRpbmcgdGhpcyB2YWx1ZSB0byB0cnVlIHdpbGwgbWFrZSB0aGUgY29tcG9uZW50IHJlcmVuZGVyIHdoZW5cbiAgICAgIC8vIHRoZSBcIm5ldHdvcmtTdGF0dXNcIiBjaGFuZ2VzLCBzbyB3ZSBhcmUgYWJsZSB0byBrbm93IGlmIGl0IGlzIGZldGNoaW5nXG4gICAgICAvLyBtb3JlIGRhdGFcbiAgICAgIG5vdGlmeU9uTmV0d29ya1N0YXR1c0NoYW5nZTogdHJ1ZSxcbiAgICB9XG4gICkgXG4gIGRlYnVnZ2VyO1xuXG4gIGNvbnN0IGxvYWRpbmdNb3JlUG9zdHMgPSBuZXR3b3JrU3RhdHVzID09PSBOZXR3b3JrU3RhdHVzLmZldGNoTW9yZVxuXG4gIGNvbnN0IGxvYWRNb3JlUG9zdHMgPSAoKSA9PiB7XG4gICAgICBkZWJ1Z2dlcjtcbiAgICBmZXRjaE1vcmUoe1xuICAgICAgdmFyaWFibGVzOiB7XG4gICAgICAgIHNraXA6IGFsbFBvc3RzLmxlbmd0aCxcbiAgICAgIH0sXG4gICAgICB1cGRhdGVRdWVyeTogKHByZXZpb3VzUmVzdWx0LCB7IGZldGNoTW9yZVJlc3VsdCB9KSA9PiB7XG4gICAgICAgIGlmICghZmV0Y2hNb3JlUmVzdWx0KSB7XG4gICAgICAgICAgcmV0dXJuIHByZXZpb3VzUmVzdWx0XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe30sIHByZXZpb3VzUmVzdWx0LCB7XG4gICAgICAgICAgLy8gQXBwZW5kIHRoZSBuZXcgcG9zdHMgcmVzdWx0cyB0byB0aGUgb2xkIG9uZVxuICAgICAgICAgIGFsbFBvc3RzOiBbLi4ucHJldmlvdXNSZXN1bHQuYWxsUG9zdHMsIC4uLmZldGNoTW9yZVJlc3VsdC5hbGxQb3N0c10sXG4gICAgICAgIH0pXG4gICAgICB9LFxuICAgIH0pXG4gIH1cblxuICBpZiAoZXJyb3IpIHJldHVybiBjb25zb2xlLmxvZyhlcnJvcilcbiAgaWYgKGxvYWRpbmcgJiYgIWxvYWRpbmdNb3JlUG9zdHMpIHJldHVybiA8ZGl2PkxvYWRpbmc8L2Rpdj5cblxuICBjb25zdCB7IGFsbFBvc3RzLCBfYWxsUG9zdHNNZXRhIH0gPSBkYXRhXG4gIGNvbnN0IGFyZU1vcmVQb3N0cyA9IGFsbFBvc3RzLmxlbmd0aCA8IF9hbGxQb3N0c01ldGEuY291bnRcblxuICByZXR1cm4gKFxuICAgIDxzZWN0aW9uPlxuICAgICAgPHVsPlxuICAgICAgICB7YWxsUG9zdHMubWFwKChwb3N0LCBpbmRleCkgPT4gKFxuICAgICAgICAgIDxsaSBrZXk9e3Bvc3QuaWR9PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPHNwYW4+e2luZGV4ICsgMX0uIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPGEgaHJlZj17cG9zdC51cmx9Pntwb3N0LnRpdGxlfTwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICkpfVxuICAgICAgPC91bD5cbiAgICAgIHthcmVNb3JlUG9zdHMgJiYgKFxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IGxvYWRNb3JlUG9zdHMoKX0gZGlzYWJsZWQ9e2xvYWRpbmdNb3JlUG9zdHN9PlxuICAgICAgICAgIHtsb2FkaW5nTW9yZVBvc3RzID8gJ0xvYWRpbmcuLi4nIDogJ1Nob3cgTW9yZSd9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgKX1cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgc2VjdGlvbiB7XG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDIwcHg7XG4gICAgICAgIH1cbiAgICAgICAgbGkge1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgIH1cbiAgICAgICAgZGl2IHtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIH1cbiAgICAgICAgYSB7XG4gICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDA7XG4gICAgICAgICAgYm9yZGVyOiAwO1xuICAgICAgICB9XG4gICAgICAgIHNwYW4ge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICAgICAgfVxuICAgICAgICB1bCB7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uOmJlZm9yZSB7XG4gICAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgICAgICAgYm9yZGVyLXdpZHRoOiA2cHggNHB4IDAgNHB4O1xuICAgICAgICAgIGJvcmRlci1jb2xvcjogI2ZmZmZmZiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDtcbiAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICBoZWlnaHQ6IDA7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgICAgICAgd2lkdGg6IDA7XG4gICAgICAgIH1cbiAgICAgIGB9PC9zdHlsZT5cbiAgICA8L3NlY3Rpb24+XG4gIClcbn0iXX0= */\\n/*@ sourceURL=/Users/kod/Desktop/podcastframework/podcastUI/components/apolloLayout.js */\"));\n}","map":{"version":3,"sources":["/Users/kod/Desktop/podcastframework/podcastUI/components/apolloLayout.js"],"names":["useQuery","NetworkStatus","gql","ALL_POSTS_QUERY","allPostsQueryVars","skip","first","PodcastsList","variables","notifyOnNetworkStatusChange","loading","error","data","fetchMore","networkStatus","loadingMorePosts","loadMorePosts","allPosts","length","updateQuery","previousResult","fetchMoreResult","console","log","_allPostsMeta","areMorePosts","count","map","post","index","id","url","title"],"mappings":";;;;;;;;;;;;;;;;;;AAAA,SAASA,QAAT,QAAyB,qBAAzB;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAGA,OAAO,IAAMC,eAAe,GAAGD,GAAH,mBAArB;AAKP,OAAO,IAAME,iBAAiB,GAAG;AAC/BC,EAAAA,IAAI,EAAE,CADyB;AAE/BC,EAAAA,KAAK,EAAE;AAFwB,CAA1B;AAKP,eAAe,SAASC,YAAT,GAAwB;AAAA,kBACsBP,QAAQ,CACjEG,eADiE,EAEjE;AACEK,IAAAA,SAAS,EAAEJ,iBADb;AAEE;AACA;AACA;AACAK,IAAAA,2BAA2B,EAAE;AAL/B,GAFiE,CAD9B;AAAA,MAC7BC,OAD6B,aAC7BA,OAD6B;AAAA,MACpBC,KADoB,aACpBA,KADoB;AAAA,MACbC,IADa,aACbA,IADa;AAAA,MACPC,SADO,aACPA,SADO;AAAA,MACIC,aADJ,aACIA,aADJ;;AAWrC;AAEA,MAAMC,gBAAgB,GAAGD,aAAa,KAAKb,aAAa,CAACY,SAAzD;;AAEA,MAAMG,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxB;AACFH,IAAAA,SAAS,CAAC;AACRL,MAAAA,SAAS,EAAE;AACTH,QAAAA,IAAI,EAAEY,QAAQ,CAACC;AADN,OADH;AAIRC,MAAAA,WAAW,EAAE,qBAACC,cAAD,QAAyC;AAAA,YAAtBC,eAAsB,QAAtBA,eAAsB;;AACpD,YAAI,CAACA,eAAL,EAAsB;AACpB,iBAAOD,cAAP;AACD;;AACD,eAAO,eAAc,EAAd,EAAkBA,cAAlB,EAAkC;AACvC;AACAH,UAAAA,QAAQ,+BAAMG,cAAc,CAACH,QAArB,sBAAkCI,eAAe,CAACJ,QAAlD;AAF+B,SAAlC,CAAP;AAID;AAZO,KAAD,CAAT;AAcD,GAhBD;;AAkBA,MAAIN,KAAJ,EAAW,OAAOW,OAAO,CAACC,GAAR,CAAYZ,KAAZ,CAAP;AACX,MAAID,OAAO,IAAI,CAACK,gBAAhB,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAlCG,MAoC7BE,QApC6B,GAoCDL,IApCC,CAoC7BK,QApC6B;AAAA,MAoCnBO,aApCmB,GAoCDZ,IApCC,CAoCnBY,aApCmB;AAqCrC,MAAMC,YAAY,GAAGR,QAAQ,CAACC,MAAT,GAAkBM,aAAa,CAACE,KAArD;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,QAAQ,CAACU,GAAT,CAAa,UAACC,IAAD,EAAOC,KAAP;AAAA,WACZ;AAAI,MAAA,GAAG,EAAED,IAAI,CAACE,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOD,KAAK,GAAG,CAAf,OADF,EAEE;AAAG,MAAA,IAAI,EAAED,IAAI,CAACG,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAoBH,IAAI,CAACI,KAAzB,CAFF,CADF,CADY;AAAA,GAAb,CADH,CADF,EAWGP,YAAY,IACX;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMT,aAAa,EAAnB;AAAA,KAAjB;AAAwC,IAAA,QAAQ,EAAED,gBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,gBAAgB,GAAG,YAAH,GAAkB,WADrC,CAZJ;AAAA;AAAA;AAAA,2rKADF;AAyDD","sourcesContent":["import { useQuery } from '@apollo/react-hooks'\nimport { NetworkStatus } from 'apollo-client'\nimport gql from 'graphql-tag'\n\n\nexport const ALL_POSTS_QUERY = gql`\nquery  ALL_POSTS_QUERY{\n      description\n    }\n`\nexport const allPostsQueryVars = {\n  skip: 0,\n  first: 10,\n}\n\nexport default function PodcastsList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_POSTS_QUERY,\n    {\n      variables: allPostsQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n    }\n  ) \n  debugger;\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore\n\n  const loadMorePosts = () => {\n      debugger;\n    fetchMore({\n      variables: {\n        skip: allPosts.length,\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        if (!fetchMoreResult) {\n          return previousResult\n        }\n        return Object.assign({}, previousResult, {\n          // Append the new posts results to the old one\n          allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts],\n        })\n      },\n    })\n  }\n\n  if (error) return console.log(error)\n  if (loading && !loadingMorePosts) return <div>Loading</div>\n\n  const { allPosts, _allPostsMeta } = data\n  const areMorePosts = allPosts.length < _allPostsMeta.count\n\n  return (\n    <section>\n      <ul>\n        {allPosts.map((post, index) => (\n          <li key={post.id}>\n            <div>\n              <span>{index + 1}. </span>\n              <a href={post.url}>{post.title}</a>\n            </div>\n          </li>\n        ))}\n      </ul>\n      {areMorePosts && (\n        <button onClick={() => loadMorePosts()} disabled={loadingMorePosts}>\n          {loadingMorePosts ? 'Loading...' : 'Show More'}\n        </button>\n      )}\n      <style jsx>{`\n        section {\n          padding-bottom: 20px;\n        }\n        li {\n          display: block;\n          margin-bottom: 10px;\n        }\n        div {\n          align-items: center;\n          display: flex;\n        }\n        a {\n          font-size: 14px;\n          margin-right: 10px;\n          text-decoration: none;\n          padding-bottom: 0;\n          border: 0;\n        }\n        span {\n          font-size: 14px;\n          margin-right: 5px;\n        }\n        ul {\n          margin: 0;\n          padding: 0;\n        }\n        button:before {\n          align-self: center;\n          border-style: solid;\n          border-width: 6px 4px 0 4px;\n          border-color: #ffffff transparent transparent transparent;\n          content: '';\n          height: 0;\n          margin-right: 5px;\n          width: 0;\n        }\n      `}</style>\n    </section>\n  )\n}"]},"metadata":{},"sourceType":"module"}