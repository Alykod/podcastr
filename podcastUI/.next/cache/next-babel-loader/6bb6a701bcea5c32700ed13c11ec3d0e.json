{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nvar _jsxFileName = \"/Users/kod/Desktop/podcastframework/podcastUI/components/apolloLayout.js\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useQuery } from '@apollo/react-hooks';\nimport { NetworkStatus } from 'apollo-client';\nimport gql from 'graphql-tag';\nexport const ALL_POSTS_QUERY = gql`\nquery  podcasts{\n    podcasts {\n        description\n    }\n    }\n`;\nexport const allPostsQueryVars = {\n  skip: 0,\n  first: 10\n};\nexport default function PodcastsList() {\n  const {\n    loading,\n    error,\n    data,\n    fetchMore,\n    networkStatus\n  } = useQuery(ALL_POSTS_QUERY, {\n    variables: allPostsQueryVars,\n    // Setting this value to true will make the component rerender when\n    // the \"networkStatus\" changes, so we are able to know if it is fetching\n    // more data\n    notifyOnNetworkStatusChange: true\n  });\n  debugger;\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore;\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: allPosts.length\n      },\n      updateQuery: (previousResult, {\n        fetchMoreResult\n      }) => {\n        if (!fetchMoreResult) {\n          return previousResult;\n        }\n\n        return _Object$assign({}, previousResult, {\n          // Append the new posts results to the old one\n          allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts]\n        });\n      }\n    });\n  };\n\n  if (error) return console.log(error);\n  if (loading && !loadingMorePosts) return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Loading\");\n  debugger;\n  const {\n    allPosts,\n    _allPostsMeta\n  } = data;\n  const areMorePosts = allPosts.length < _allPostsMeta.count;\n  return __jsx(\"section\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, __jsx(\"ul\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, allPosts.map((post, index) => __jsx(\"li\", {\n    key: post.id,\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, __jsx(\"div\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"span\", {\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, index + 1, \". \"), __jsx(\"a\", {\n    href: post.url,\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, post.title))))), areMorePosts && __jsx(\"button\", {\n    onClick: () => loadMorePosts(),\n    disabled: loadingMorePosts,\n    className: \"jsx-1458778202\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, loadingMorePosts ? 'Loading...' : 'Show More'), __jsx(_JSXStyle, {\n    id: \"1458778202\",\n    __self: this\n  }, \"section.jsx-1458778202{padding-bottom:20px;}li.jsx-1458778202{display:block;margin-bottom:10px;}div.jsx-1458778202{-webkit-align-items:center;-webkit-box-align:center;-ms-flex-align:center;align-items:center;display:-webkit-box;display:-webkit-flex;display:-ms-flexbox;display:flex;}a.jsx-1458778202{font-size:14px;margin-right:10px;-webkit-text-decoration:none;text-decoration:none;padding-bottom:0;border:0;}span.jsx-1458778202{font-size:14px;margin-right:5px;}ul.jsx-1458778202{margin:0;padding:0;}button.jsx-1458778202:before{-webkit-align-self:center;-ms-flex-item-align:center;align-self:center;border-style:solid;border-width:6px 4px 0 4px;border-color:#ffffff transparent transparent transparent;content:'';height:0;margin-right:5px;width:0;}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9Vc2Vycy9rb2QvRGVza3RvcC9wb2RjYXN0ZnJhbWV3b3JrL3BvZGNhc3RVSS9jb21wb25lbnRzL2Fwb2xsb0xheW91dC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUF3RWtCLEFBRytCLEFBR04sQUFJSyxBQUlKLEFBT0EsQUFJTixBQUlTLFNBSFIsS0FuQlMsQ0FRRCxBQU9ELElBS25CLENBdkJBLFlBbUJBLENBZkEsQUFRdUIsc0NBY0YsWUFiRixPQWNVLEdBcEJkLE9BT0osU0FDWCxRQWEyRCxrREFwQjNELE9BcUJhLFdBQ0YsU0FDUSxpQkFDVCxRQUNWIiwiZmlsZSI6Ii9Vc2Vycy9rb2QvRGVza3RvcC9wb2RjYXN0ZnJhbWV3b3JrL3BvZGNhc3RVSS9jb21wb25lbnRzL2Fwb2xsb0xheW91dC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVF1ZXJ5IH0gZnJvbSAnQGFwb2xsby9yZWFjdC1ob29rcydcbmltcG9ydCB7IE5ldHdvcmtTdGF0dXMgfSBmcm9tICdhcG9sbG8tY2xpZW50J1xuaW1wb3J0IGdxbCBmcm9tICdncmFwaHFsLXRhZydcblxuXG5leHBvcnQgY29uc3QgQUxMX1BPU1RTX1FVRVJZID0gZ3FsYFxucXVlcnkgIHBvZGNhc3Rze1xuICAgIHBvZGNhc3RzIHtcbiAgICAgICAgZGVzY3JpcHRpb25cbiAgICB9XG4gICAgfVxuYFxuZXhwb3J0IGNvbnN0IGFsbFBvc3RzUXVlcnlWYXJzID0ge1xuICBza2lwOiAwLFxuICBmaXJzdDogMTAsXG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFBvZGNhc3RzTGlzdCgpIHtcbiAgY29uc3QgeyBsb2FkaW5nLCBlcnJvciwgZGF0YSwgZmV0Y2hNb3JlLCBuZXR3b3JrU3RhdHVzIH0gPSB1c2VRdWVyeShcbiAgICBBTExfUE9TVFNfUVVFUlksXG4gICAge1xuICAgICAgdmFyaWFibGVzOiBhbGxQb3N0c1F1ZXJ5VmFycyxcbiAgICAgIC8vIFNldHRpbmcgdGhpcyB2YWx1ZSB0byB0cnVlIHdpbGwgbWFrZSB0aGUgY29tcG9uZW50IHJlcmVuZGVyIHdoZW5cbiAgICAgIC8vIHRoZSBcIm5ldHdvcmtTdGF0dXNcIiBjaGFuZ2VzLCBzbyB3ZSBhcmUgYWJsZSB0byBrbm93IGlmIGl0IGlzIGZldGNoaW5nXG4gICAgICAvLyBtb3JlIGRhdGFcbiAgICAgIG5vdGlmeU9uTmV0d29ya1N0YXR1c0NoYW5nZTogdHJ1ZSxcbiAgICB9XG4gICkgXG4gIGRlYnVnZ2VyO1xuXG4gIGNvbnN0IGxvYWRpbmdNb3JlUG9zdHMgPSBuZXR3b3JrU3RhdHVzID09PSBOZXR3b3JrU3RhdHVzLmZldGNoTW9yZVxuXG4gIGNvbnN0IGxvYWRNb3JlUG9zdHMgPSAoKSA9PiB7XG4gICAgZmV0Y2hNb3JlKHtcbiAgICAgIHZhcmlhYmxlczoge1xuICAgICAgICBza2lwOiBhbGxQb3N0cy5sZW5ndGgsXG4gICAgICB9LFxuICAgICAgdXBkYXRlUXVlcnk6IChwcmV2aW91c1Jlc3VsdCwgeyBmZXRjaE1vcmVSZXN1bHQgfSkgPT4ge1xuICAgICAgICBpZiAoIWZldGNoTW9yZVJlc3VsdCkge1xuICAgICAgICAgIHJldHVybiBwcmV2aW91c1Jlc3VsdFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBPYmplY3QuYXNzaWduKHt9LCBwcmV2aW91c1Jlc3VsdCwge1xuICAgICAgICAgIC8vIEFwcGVuZCB0aGUgbmV3IHBvc3RzIHJlc3VsdHMgdG8gdGhlIG9sZCBvbmVcbiAgICAgICAgICBhbGxQb3N0czogWy4uLnByZXZpb3VzUmVzdWx0LmFsbFBvc3RzLCAuLi5mZXRjaE1vcmVSZXN1bHQuYWxsUG9zdHNdLFxuICAgICAgICB9KVxuICAgICAgfSxcbiAgICB9KVxuICB9XG5cbiAgaWYgKGVycm9yKSByZXR1cm4gY29uc29sZS5sb2coZXJyb3IpXG4gIGlmIChsb2FkaW5nICYmICFsb2FkaW5nTW9yZVBvc3RzKSByZXR1cm4gPGRpdj5Mb2FkaW5nPC9kaXY+XG4gIGRlYnVnZ2VyO1xuICBjb25zdCB7IGFsbFBvc3RzLCBfYWxsUG9zdHNNZXRhIH0gPSBkYXRhXG4gIGNvbnN0IGFyZU1vcmVQb3N0cyA9IGFsbFBvc3RzLmxlbmd0aCA8IF9hbGxQb3N0c01ldGEuY291bnRcblxuICByZXR1cm4gKFxuICAgIDxzZWN0aW9uPlxuICAgICAgPHVsPlxuICAgICAgICB7YWxsUG9zdHMubWFwKChwb3N0LCBpbmRleCkgPT4gKFxuICAgICAgICAgIDxsaSBrZXk9e3Bvc3QuaWR9PlxuICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgPHNwYW4+e2luZGV4ICsgMX0uIDwvc3Bhbj5cbiAgICAgICAgICAgICAgPGEgaHJlZj17cG9zdC51cmx9Pntwb3N0LnRpdGxlfTwvYT5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvbGk+XG4gICAgICAgICkpfVxuICAgICAgPC91bD5cbiAgICAgIHthcmVNb3JlUG9zdHMgJiYgKFxuICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IGxvYWRNb3JlUG9zdHMoKX0gZGlzYWJsZWQ9e2xvYWRpbmdNb3JlUG9zdHN9PlxuICAgICAgICAgIHtsb2FkaW5nTW9yZVBvc3RzID8gJ0xvYWRpbmcuLi4nIDogJ1Nob3cgTW9yZSd9XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICAgKX1cbiAgICAgIDxzdHlsZSBqc3g+e2BcbiAgICAgICAgc2VjdGlvbiB7XG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDIwcHg7XG4gICAgICAgIH1cbiAgICAgICAgbGkge1xuICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206IDEwcHg7XG4gICAgICAgIH1cbiAgICAgICAgZGl2IHtcbiAgICAgICAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgICAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICAgIH1cbiAgICAgICAgYSB7XG4gICAgICAgICAgZm9udC1zaXplOiAxNHB4O1xuICAgICAgICAgIG1hcmdpbi1yaWdodDogMTBweDtcbiAgICAgICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XG4gICAgICAgICAgcGFkZGluZy1ib3R0b206IDA7XG4gICAgICAgICAgYm9yZGVyOiAwO1xuICAgICAgICB9XG4gICAgICAgIHNwYW4ge1xuICAgICAgICAgIGZvbnQtc2l6ZTogMTRweDtcbiAgICAgICAgICBtYXJnaW4tcmlnaHQ6IDVweDtcbiAgICAgICAgfVxuICAgICAgICB1bCB7XG4gICAgICAgICAgbWFyZ2luOiAwO1xuICAgICAgICAgIHBhZGRpbmc6IDA7XG4gICAgICAgIH1cbiAgICAgICAgYnV0dG9uOmJlZm9yZSB7XG4gICAgICAgICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgICAgICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gICAgICAgICAgYm9yZGVyLXdpZHRoOiA2cHggNHB4IDAgNHB4O1xuICAgICAgICAgIGJvcmRlci1jb2xvcjogI2ZmZmZmZiB0cmFuc3BhcmVudCB0cmFuc3BhcmVudCB0cmFuc3BhcmVudDtcbiAgICAgICAgICBjb250ZW50OiAnJztcbiAgICAgICAgICBoZWlnaHQ6IDA7XG4gICAgICAgICAgbWFyZ2luLXJpZ2h0OiA1cHg7XG4gICAgICAgICAgd2lkdGg6IDA7XG4gICAgICAgIH1cbiAgICAgIGB9PC9zdHlsZT5cbiAgICA8L3NlY3Rpb24+XG4gIClcbn0iXX0= */\\n/*@ sourceURL=/Users/kod/Desktop/podcastframework/podcastUI/components/apolloLayout.js */\"));\n}","map":{"version":3,"sources":["/Users/kod/Desktop/podcastframework/podcastUI/components/apolloLayout.js"],"names":["useQuery","NetworkStatus","gql","ALL_POSTS_QUERY","allPostsQueryVars","skip","first","PodcastsList","loading","error","data","fetchMore","networkStatus","variables","notifyOnNetworkStatusChange","loadingMorePosts","loadMorePosts","allPosts","length","updateQuery","previousResult","fetchMoreResult","console","log","_allPostsMeta","areMorePosts","count","map","post","index","id","url","title"],"mappings":";;;;;AAAA,SAASA,QAAT,QAAyB,qBAAzB;AACA,SAASC,aAAT,QAA8B,eAA9B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAGA,OAAO,MAAMC,eAAe,GAAGD,GAAI;;;;;;CAA5B;AAOP,OAAO,MAAME,iBAAiB,GAAG;AAC/BC,EAAAA,IAAI,EAAE,CADyB;AAE/BC,EAAAA,KAAK,EAAE;AAFwB,CAA1B;AAKP,eAAe,SAASC,YAAT,GAAwB;AACrC,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA,IAAlB;AAAwBC,IAAAA,SAAxB;AAAmCC,IAAAA;AAAnC,MAAqDZ,QAAQ,CACjEG,eADiE,EAEjE;AACEU,IAAAA,SAAS,EAAET,iBADb;AAEE;AACA;AACA;AACAU,IAAAA,2BAA2B,EAAE;AAL/B,GAFiE,CAAnE;AAUA;AAEA,QAAMC,gBAAgB,GAAGH,aAAa,KAAKX,aAAa,CAACU,SAAzD;;AAEA,QAAMK,aAAa,GAAG,MAAM;AAC1BL,IAAAA,SAAS,CAAC;AACRE,MAAAA,SAAS,EAAE;AACTR,QAAAA,IAAI,EAAEY,QAAQ,CAACC;AADN,OADH;AAIRC,MAAAA,WAAW,EAAE,CAACC,cAAD,EAAiB;AAAEC,QAAAA;AAAF,OAAjB,KAAyC;AACpD,YAAI,CAACA,eAAL,EAAsB;AACpB,iBAAOD,cAAP;AACD;;AACD,eAAO,eAAc,EAAd,EAAkBA,cAAlB,EAAkC;AACvC;AACAH,UAAAA,QAAQ,EAAE,CAAC,GAAGG,cAAc,CAACH,QAAnB,EAA6B,GAAGI,eAAe,CAACJ,QAAhD;AAF6B,SAAlC,CAAP;AAID;AAZO,KAAD,CAAT;AAcD,GAfD;;AAiBA,MAAIR,KAAJ,EAAW,OAAOa,OAAO,CAACC,GAAR,CAAYd,KAAZ,CAAP;AACX,MAAID,OAAO,IAAI,CAACO,gBAAhB,EAAkC,OAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AAClC;AACA,QAAM;AAAEE,IAAAA,QAAF;AAAYO,IAAAA;AAAZ,MAA8Bd,IAApC;AACA,QAAMe,YAAY,GAAGR,QAAQ,CAACC,MAAT,GAAkBM,aAAa,CAACE,KAArD;AAEA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,QAAQ,CAACU,GAAT,CAAa,CAACC,IAAD,EAAOC,KAAP,KACZ;AAAI,IAAA,GAAG,EAAED,IAAI,CAACE,EAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAOD,KAAK,GAAG,CAAf,OADF,EAEE;AAAG,IAAA,IAAI,EAAED,IAAI,CAACG,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAoBH,IAAI,CAACI,KAAzB,CAFF,CADF,CADD,CADH,CADF,EAWGP,YAAY,IACX;AAAQ,IAAA,OAAO,EAAE,MAAMT,aAAa,EAApC;AAAwC,IAAA,QAAQ,EAAED,gBAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,gBAAgB,GAAG,YAAH,GAAkB,WADrC,CAZJ;AAAA;AAAA;AAAA,2sKADF;AAyDD","sourcesContent":["import { useQuery } from '@apollo/react-hooks'\nimport { NetworkStatus } from 'apollo-client'\nimport gql from 'graphql-tag'\n\n\nexport const ALL_POSTS_QUERY = gql`\nquery  podcasts{\n    podcasts {\n        description\n    }\n    }\n`\nexport const allPostsQueryVars = {\n  skip: 0,\n  first: 10,\n}\n\nexport default function PodcastsList() {\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_POSTS_QUERY,\n    {\n      variables: allPostsQueryVars,\n      // Setting this value to true will make the component rerender when\n      // the \"networkStatus\" changes, so we are able to know if it is fetching\n      // more data\n      notifyOnNetworkStatusChange: true,\n    }\n  ) \n  debugger;\n\n  const loadingMorePosts = networkStatus === NetworkStatus.fetchMore\n\n  const loadMorePosts = () => {\n    fetchMore({\n      variables: {\n        skip: allPosts.length,\n      },\n      updateQuery: (previousResult, { fetchMoreResult }) => {\n        if (!fetchMoreResult) {\n          return previousResult\n        }\n        return Object.assign({}, previousResult, {\n          // Append the new posts results to the old one\n          allPosts: [...previousResult.allPosts, ...fetchMoreResult.allPosts],\n        })\n      },\n    })\n  }\n\n  if (error) return console.log(error)\n  if (loading && !loadingMorePosts) return <div>Loading</div>\n  debugger;\n  const { allPosts, _allPostsMeta } = data\n  const areMorePosts = allPosts.length < _allPostsMeta.count\n\n  return (\n    <section>\n      <ul>\n        {allPosts.map((post, index) => (\n          <li key={post.id}>\n            <div>\n              <span>{index + 1}. </span>\n              <a href={post.url}>{post.title}</a>\n            </div>\n          </li>\n        ))}\n      </ul>\n      {areMorePosts && (\n        <button onClick={() => loadMorePosts()} disabled={loadingMorePosts}>\n          {loadingMorePosts ? 'Loading...' : 'Show More'}\n        </button>\n      )}\n      <style jsx>{`\n        section {\n          padding-bottom: 20px;\n        }\n        li {\n          display: block;\n          margin-bottom: 10px;\n        }\n        div {\n          align-items: center;\n          display: flex;\n        }\n        a {\n          font-size: 14px;\n          margin-right: 10px;\n          text-decoration: none;\n          padding-bottom: 0;\n          border: 0;\n        }\n        span {\n          font-size: 14px;\n          margin-right: 5px;\n        }\n        ul {\n          margin: 0;\n          padding: 0;\n        }\n        button:before {\n          align-self: center;\n          border-style: solid;\n          border-width: 6px 4px 0 4px;\n          border-color: #ffffff transparent transparent transparent;\n          content: '';\n          height: 0;\n          margin-right: 5px;\n          width: 0;\n        }\n      `}</style>\n    </section>\n  )\n}"]},"metadata":{},"sourceType":"module"}