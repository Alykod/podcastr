{"ast":null,"code":"var _jsxFileName = \"/Users/kod/Desktop/podcastframework/podcastUI/pages/index.js\";\nvar __jsx = React.createElement;\nimport Link from \"next/link\";\nimport Header from \"../components/header\";\nimport Layout from \"../components/layout\";\nimport React, { useContext, useEffect, useState } from \"react\";\nimport PodcastContext from '../components/context/podcastContext';\nimport { UPDATE_CURRENT_PODCAST } from '..//components/context/reducers';\nimport apollo, { withApollo } from '../lib/apollo'; // import PodcastsList from '../components/apolloLayout';\n\nimport { useQuery } from '@apollo/react-hooks';\nimport { PodcastsQuery, LatestPodcastQuery } from '../services/query';\n\nvar Index = function Index() {\n  var podcastContext = useContext(PodcastContext);\n\n  var _useQuery = useQuery(PodcastsQuery),\n      podcastData = _useQuery.podcastData,\n      loadingStatus = _useQuery.loadingStatus,\n      error = _useQuery.error;\n\n  var _useState = useState(loadingStatus),\n      loading = _useState.loading,\n      setLoading = _useState.setLoading; // console.log\n\n\n  console.log(\"loading\", loading);\n  console.log(\"error\", error);\n  console.log(\"data\", podcastData);\n\n  var _useQuery2 = useQuery(LatestPodcastQuery, {\n    variables: {\n      someId: \"1\"\n    }\n  }),\n      newDAta = _useQuery2.newDAta;\n\n  console.log(newDAta);\n  useEffect(function () {\n    if (podcastContext.podcastState.currentPodcast == \"\") {\n      podcastContext.updateCurrentPodcast('test'); // podcastContext.dispatch({type: UPDATE_CURRENT_PODCAST, value: 'test'})\n    }\n  }, []); // console.log(useContext(PodcastContext));\n\n  return __jsx(Layout, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Hello Next.js\"));\n}; //reason get initial props is not used in this situation, is due to the fact that it would not work with hooks. When react suspense is out, this might be updated. \n\n\nexport default Index;","map":{"version":3,"sources":["/Users/kod/Desktop/podcastframework/podcastUI/pages/index.js"],"names":["Link","Header","Layout","React","useContext","useEffect","useState","PodcastContext","UPDATE_CURRENT_PODCAST","apollo","withApollo","useQuery","PodcastsQuery","LatestPodcastQuery","Index","podcastContext","podcastData","loadingStatus","error","loading","setLoading","console","log","variables","someId","newDAta","podcastState","currentPodcast","updateCurrentPodcast"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,QAAvC,QAAsD,OAAtD;AACA,OAAOC,cAAP,MAA2B,sCAA3B;AACA,SAAQC,sBAAR,QAAqC,iCAArC;AACA,OAAOC,MAAP,IAAiBC,UAAjB,QAAmC,eAAnC,C,CACA;;AACA,SAASC,QAAT,QAAyB,qBAAzB;AACA,SAAQC,aAAR,EAAuBC,kBAAvB,QAAgD,mBAAhD;;AAGA,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAM;AAChB,MAAMC,cAAc,GAAGX,UAAU,CAACG,cAAD,CAAjC;;AADgB,kBAE8BI,QAAQ,CAACC,aAAD,CAFtC;AAAA,MAERI,WAFQ,aAERA,WAFQ;AAAA,MAEKC,aAFL,aAEKA,aAFL;AAAA,MAEoBC,KAFpB,aAEoBA,KAFpB;;AAAA,kBAGcZ,QAAQ,CAACW,aAAD,CAHtB;AAAA,MAGTE,OAHS,aAGTA,OAHS;AAAA,MAGAC,UAHA,aAGAA,UAHA,EAIhB;;;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBH,OAAvB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBJ,KAApB;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBN,WAApB;;AAPgB,mBASIL,QAAQ,CAACE,kBAAD,EAAqB;AAAEU,IAAAA,SAAS,EAAE;AAACC,MAAAA,MAAM,EAAE;AAAT;AAAb,GAArB,CATZ;AAAA,MASRC,OATQ,cASRA,OATQ;;AAUhBJ,EAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ;AACApB,EAAAA,SAAS,CAAC,YAAK;AACX,QAAGU,cAAc,CAACW,YAAf,CAA4BC,cAA5B,IAA8C,EAAjD,EAAqD;AACjDZ,MAAAA,cAAc,CAACa,oBAAf,CAAoC,MAApC,EADiD,CAEjD;AACH;AACJ,GALQ,EAKN,EALM,CAAT,CAXgB,CAiBhB;;AACF,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAFF,CADF;AAMD,CAxBD,C,CA0BA;;;AAGA,eAAed,KAAf","sourcesContent":["import Link from \"next/link\";\nimport Header from \"../components/header\";\nimport Layout from \"../components/layout\";\nimport React, { useContext, useEffect, useState} from \"react\";\nimport PodcastContext from '../components/context/podcastContext';\nimport {UPDATE_CURRENT_PODCAST} from '..//components/context/reducers'\nimport apollo, { withApollo } from '../lib/apollo'\n// import PodcastsList from '../components/apolloLayout';\nimport { useQuery } from '@apollo/react-hooks';\nimport {PodcastsQuery, LatestPodcastQuery} from '../services/query';\n\n\nconst Index = () => {\n    const podcastContext = useContext(PodcastContext)\n    const { podcastData, loadingStatus, error } = useQuery(PodcastsQuery);\n    const {loading, setLoading} = useState(loadingStatus)\n    // console.log\n    console.log(\"loading\", loading)\n    console.log(\"error\",error)\n    console.log(\"data\", podcastData);\n\n    const { newDAta } = useQuery(LatestPodcastQuery, { variables: {someId: \"1\"}})\n    console.log(newDAta)\n    useEffect(()=> {\n        if(podcastContext.podcastState.currentPodcast == \"\") {\n            podcastContext.updateCurrentPodcast('test')\n            // podcastContext.dispatch({type: UPDATE_CURRENT_PODCAST, value: 'test'})\n        }\n    }, [])\n    // console.log(useContext(PodcastContext));\n  return (\n    <Layout>\n    {/* <PodcastsList /> */}\n      <p>Hello Next.js</p>\n    </Layout>\n  );\n};\n\n//reason get initial props is not used in this situation, is due to the fact that it would not work with hooks. When react suspense is out, this might be updated. \n\n\nexport default Index;\n"]},"metadata":{},"sourceType":"module"}